{"ast":null,"code":"var _jsxFileName = \"/home/mg/github/python/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './styles.scss';\nimport StockTable from './components/StockTable';\nimport StockForm from './components/StockForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [signals, setSignals] = useState({});\n  const [formData, setFormData] = useState({\n    symbol: '',\n    name: '',\n    shares: 1\n  });\n  const [sellReasons, setSellReasons] = useState({});\n  useEffect(() => {\n    const fetchStocks = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/stocks'); // Fetch stocks from the database\n        if (!response.ok) {\n          throw new Error('Failed to fetch stocks');\n        }\n        const data = await response.json();\n        console.log('Fetched stocks:', data); // Log the fetched stocks\n        setSignals(data.reduce((acc, stock) => {\n          acc[stock.symbol] = {\n            signal: stock.signal.toUpperCase(),\n            name: stock.name,\n            shares: stock.shares,\n            profit: stock.profit\n          };\n          return acc;\n        }, {}));\n      } catch (error) {\n        console.error('Error fetching stocks:', error);\n      }\n    };\n    fetchStocks();\n    const interval = setInterval(fetchStocks, 60000); // Refresh every 60 seconds\n    return () => clearInterval(interval); // Cleanup interval on component unmount\n  }, []);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:5001/stocks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add stock');\n      }\n      setFormData({\n        symbol: '',\n        name: '',\n        shares: 1\n      });\n\n      // Fetch updated stock list after adding a new stock\n      const updatedResponse = await fetch('http://localhost:5001/stocks');\n      if (!updatedResponse.ok) {\n        throw new Error('Failed to fetch updated stocks');\n      }\n      const updatedData = await updatedResponse.json();\n      setSignals(updatedData.reduce((acc, stock) => {\n        acc[stock.symbol] = {\n          signal: stock.signal.toUpperCase(),\n          name: stock.name,\n          shares: stock.shares,\n          profit: stock.profit\n        };\n        return acc;\n      }, {}));\n    } catch (error) {\n      console.error('Error adding stock:', error);\n    }\n  };\n  const handleDelete = async symbol => {\n    try {\n      const response = await fetch(`http://localhost:5001/stocks/${symbol}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete stock');\n      }\n      // Refresh the stock list after deletion\n      setSignals(prevSignals => {\n        const updatedSignals = {\n          ...prevSignals\n        };\n        delete updatedSignals[symbol];\n        return updatedSignals;\n      });\n    } catch (error) {\n      console.error('Error deleting stock:', error);\n    }\n  };\n  const fetchSellReason = async symbol => {\n    try {\n      console.log('Fetching reason for:', symbol);\n      const response = await fetch(`http://localhost:5000/signals/reason/${symbol}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch sell reason');\n      }\n      const data = await response.json();\n      setSellReasons(prevReasons => ({\n        ...prevReasons,\n        [symbol]: data.reason\n      }));\n    } catch (error) {\n      console.error('Error fetching sell reason:', error);\n      setSellReasons(prevReasons => ({\n        ...prevReasons,\n        [symbol]: 'No reason available'\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-primary text-white text-center py-3\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Stock Signal Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(StockForm, {\n        formData: formData,\n        handleInputChange: handleInputChange,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), Object.keys(signals).length > 0 && /*#__PURE__*/_jsxDEV(StockTable, {\n        signals: signals,\n        sellReasons: sellReasons,\n        fetchSellReason: fetchSellReason,\n        handleDelete: handleDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"qJGK+OQqDauo4hju4Tc9WnwRMYw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","StockTable","StockForm","jsxDEV","_jsxDEV","App","_s","signals","setSignals","formData","setFormData","symbol","name","shares","sellReasons","setSellReasons","fetchStocks","response","fetch","ok","Error","data","json","console","log","reduce","acc","stock","signal","toUpperCase","profit","error","interval","setInterval","clearInterval","handleInputChange","e","value","target","handleSubmit","preventDefault","method","headers","body","JSON","stringify","updatedResponse","updatedData","handleDelete","prevSignals","updatedSignals","fetchSellReason","prevReasons","reason","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","length","_c","$RefreshReg$"],"sources":["/home/mg/github/python/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './styles.scss';\nimport StockTable from './components/StockTable';\nimport StockForm from './components/StockForm';\n\nfunction App() {\n    const [signals, setSignals] = useState({});\n    const [formData, setFormData] = useState({ symbol: '', name: '', shares: 1 });\n    const [sellReasons, setSellReasons] = useState({});\n\n    useEffect(() => {\n        const fetchStocks = async () => {\n            try {\n                const response = await fetch('http://localhost:5001/stocks'); // Fetch stocks from the database\n                if (!response.ok) {\n                    throw new Error('Failed to fetch stocks');\n                }\n                const data = await response.json();\n                console.log('Fetched stocks:', data); // Log the fetched stocks\n                setSignals(data.reduce((acc, stock) => {\n                    acc[stock.symbol] = {\n                        signal: stock.signal.toUpperCase(),\n                        name: stock.name,\n                        shares: stock.shares,\n                        profit: stock.profit\n                    };\n                    return acc;\n                }, {}));\n            } catch (error) {\n                console.error('Error fetching stocks:', error);\n            }\n        };\n\n        fetchStocks();\n\n        const interval = setInterval(fetchStocks, 60000); // Refresh every 60 seconds\n        return () => clearInterval(interval); // Cleanup interval on component unmount\n    }, []);\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setFormData({ ...formData, [name]: value });\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            const response = await fetch('http://localhost:5001/stocks', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(formData),\n            });\n            if (!response.ok) {\n                throw new Error('Failed to add stock');\n            }\n            setFormData({ symbol: '', name: '', shares: 1 });\n\n            // Fetch updated stock list after adding a new stock\n            const updatedResponse = await fetch('http://localhost:5001/stocks');\n            if (!updatedResponse.ok) {\n                throw new Error('Failed to fetch updated stocks');\n            }\n            const updatedData = await updatedResponse.json();\n            setSignals(updatedData.reduce((acc, stock) => {\n                acc[stock.symbol] = {\n                    signal: stock.signal.toUpperCase(),\n                    name: stock.name,\n                    shares: stock.shares,\n                    profit: stock.profit\n                };\n                return acc;\n            }, {}));\n        } catch (error) {\n            console.error('Error adding stock:', error);\n        }\n    };\n\n    const handleDelete = async (symbol) => {\n        try {\n            const response = await fetch(`http://localhost:5001/stocks/${symbol}`, {\n                method: 'DELETE',\n            });\n            if (!response.ok) {\n                throw new Error('Failed to delete stock');\n            }\n            // Refresh the stock list after deletion\n            setSignals((prevSignals) => {\n                const updatedSignals = { ...prevSignals };\n                delete updatedSignals[symbol];\n                return updatedSignals;\n            });\n        } catch (error) {\n            console.error('Error deleting stock:', error);\n        }\n    };\n\n    const fetchSellReason = async (symbol) => {\n        try {\n            console.log('Fetching reason for:', symbol);\n            const response = await fetch(`http://localhost:5000/signals/reason/${symbol}`);\n            if (!response.ok) {\n                throw new Error('Failed to fetch sell reason');\n            }\n            const data = await response.json();\n            setSellReasons((prevReasons) => ({ ...prevReasons, [symbol]: data.reason }));\n        } catch (error) {\n            console.error('Error fetching sell reason:', error);\n            setSellReasons((prevReasons) => ({ ...prevReasons, [symbol]: 'No reason available' }));\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"bg-primary text-white text-center py-3\">\n                <h1>Stock Signal Dashboard</h1>\n            </header>\n            <main className=\"container mt-4\">\n                <StockForm \n                    formData={formData} \n                    handleInputChange={handleInputChange} \n                    handleSubmit={handleSubmit} \n                />\n\n                {Object.keys(signals).length > 0 && (\n                    <StockTable \n                        signals={signals} \n                        sellReasons={sellReasons} \n                        fetchSellReason={fetchSellReason} \n                        handleDelete={handleDelete} \n                    />\n                )}\n            </main>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}