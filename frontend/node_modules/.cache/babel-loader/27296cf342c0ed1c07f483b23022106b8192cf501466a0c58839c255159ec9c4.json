{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useStockData = () => {\n  _s();\n  const [signals, setSignals] = useState({});\n  const [sellReasons, setSellReasons] = useState({});\n  useEffect(() => {\n    const fetchStocks = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/stocks');\n        if (!response.ok) {\n          throw new Error('Failed to fetch stocks');\n        }\n        const data = await response.json();\n        setSignals(data.reduce((acc, stock) => {\n          acc[stock.symbol] = {\n            signal: stock.signal ? stock.signal.toUpperCase() : 'UNKNOWN',\n            name: stock.name,\n            shares: stock.shares,\n            profit: stock.profit\n          };\n          return acc;\n        }, {}));\n      } catch (error) {\n        console.error('Error fetching stocks:', error);\n      }\n    };\n    fetchStocks();\n    const interval = setInterval(fetchStocks, 60000);\n    return () => clearInterval(interval);\n  }, []);\n  const fetchSellReason = async symbol => {\n    try {\n      const response = await fetch(`http://localhost:5001/signals/reason/${symbol}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch sell reason');\n      }\n      const data = await response.json();\n      setSellReasons(prevReasons => ({\n        ...prevReasons,\n        [symbol]: data.reason\n      }));\n    } catch (error) {\n      console.error('Error fetching sell reason:', error);\n      setSellReasons(prevReasons => ({\n        ...prevReasons,\n        [symbol]: 'No reason available'\n      }));\n    }\n  };\n  return {\n    signals,\n    sellReasons,\n    fetchSellReason,\n    setSignals\n  };\n};\n_s(useStockData, \"NDHjay85ZayZ8TCTsQ2v2VelFsY=\");\nexport default useStockData;","map":{"version":3,"names":["useState","useEffect","useStockData","_s","signals","setSignals","sellReasons","setSellReasons","fetchStocks","response","fetch","ok","Error","data","json","reduce","acc","stock","symbol","signal","toUpperCase","name","shares","profit","error","console","interval","setInterval","clearInterval","fetchSellReason","prevReasons","reason"],"sources":["/home/mg/github/python/frontend/src/components/useStockData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useStockData = () => {\n    const [signals, setSignals] = useState({});\n    const [sellReasons, setSellReasons] = useState({});\n\n    useEffect(() => {\n        const fetchStocks = async () => {\n            try {\n                const response = await fetch('http://localhost:5001/stocks');\n                if (!response.ok) {\n                    throw new Error('Failed to fetch stocks');\n                }\n                const data = await response.json();\n                setSignals(data.reduce((acc, stock) => {\n                    acc[stock.symbol] = {\n                        signal: stock.signal ? stock.signal.toUpperCase() : 'UNKNOWN',\n                        name: stock.name,\n                        shares: stock.shares,\n                        profit: stock.profit\n                    };\n                    return acc;\n                }, {}));\n            } catch (error) {\n                console.error('Error fetching stocks:', error);\n            }\n        };\n\n        fetchStocks();\n\n        const interval = setInterval(fetchStocks, 60000);\n        return () => clearInterval(interval);\n    }, []);\n\n    const fetchSellReason = async (symbol) => {\n        try {\n            const response = await fetch(`http://localhost:5001/signals/reason/${symbol}`);\n            if (!response.ok) {\n                throw new Error('Failed to fetch sell reason');\n            }\n            const data = await response.json();\n            setSellReasons((prevReasons) => ({ ...prevReasons, [symbol]: data.reason }));\n        } catch (error) {\n            console.error('Error fetching sell reason:', error);\n            setSellReasons((prevReasons) => ({ ...prevReasons, [symbol]: 'No reason available' }));\n        }\n    };\n\n    return { signals, sellReasons, fetchSellReason, setSignals };\n};\n\nexport default useStockData;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElDC,SAAS,CAAC,MAAM;IACZ,MAAMO,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;QAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;QAC7C;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCT,UAAU,CAACQ,IAAI,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;UACnCD,GAAG,CAACC,KAAK,CAACC,MAAM,CAAC,GAAG;YAChBC,MAAM,EAAEF,KAAK,CAACE,MAAM,GAAGF,KAAK,CAACE,MAAM,CAACC,WAAW,CAAC,CAAC,GAAG,SAAS;YAC7DC,IAAI,EAAEJ,KAAK,CAACI,IAAI;YAChBC,MAAM,EAAEL,KAAK,CAACK,MAAM;YACpBC,MAAM,EAAEN,KAAK,CAACM;UAClB,CAAC;UACD,OAAOP,GAAG;QACd,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACX,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACJ,CAAC;IAEDhB,WAAW,CAAC,CAAC;IAEb,MAAMkB,QAAQ,GAAGC,WAAW,CAACnB,WAAW,EAAE,KAAK,CAAC;IAChD,OAAO,MAAMoB,aAAa,CAACF,QAAQ,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,eAAe,GAAG,MAAOX,MAAM,IAAK;IACtC,IAAI;MACA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwCQ,MAAM,EAAE,CAAC;MAC9E,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAClD;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCP,cAAc,CAAEuB,WAAW,KAAM;QAAE,GAAGA,WAAW;QAAE,CAACZ,MAAM,GAAGL,IAAI,CAACkB;MAAO,CAAC,CAAC,CAAC;IAChF,CAAC,CAAC,OAAOP,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDjB,cAAc,CAAEuB,WAAW,KAAM;QAAE,GAAGA,WAAW;QAAE,CAACZ,MAAM,GAAG;MAAsB,CAAC,CAAC,CAAC;IAC1F;EACJ,CAAC;EAED,OAAO;IAAEd,OAAO;IAAEE,WAAW;IAAEuB,eAAe;IAAExB;EAAW,CAAC;AAChE,CAAC;AAACF,EAAA,CA/CID,YAAY;AAiDlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}